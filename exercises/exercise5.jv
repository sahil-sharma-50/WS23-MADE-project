// Task: Build an automated data pipeline for GTFS data
// Author: Sahil Sharma
// Date: January 23, 2023

// Only keep stops from zone 2001
constraint ZoneIDRange oftype RangeConstraint { 
    lowerBound: 2001; 
    upperBound: 2001;
}
valuetype ZoneID oftype integer { 
    constraints: [ZoneIDRange]; 
}

// Data validation for geographic coordinates
constraint GeoCoordinatesRange oftype RangeConstraint {
    lowerBound: -90; 
    upperBound: 90; 
}

valuetype GeoCoordinates oftype decimal { 
    constraints: [GeoCoordinatesRange]; 
}

pipeline GTFSPipeline {
    block GTFSExtractor oftype HttpExtractor { 
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip"; 
    }

    block GTFSArchiveInterpreter oftype ArchiveInterpreter { 
        archiveType: "zip"; 
    }

    block GTFSFilePicker oftype FilePicker { 
        path: "/stops.txt"; 
    }

    block GTFSTextFileInterpreter oftype TextFileInterpreter {}

    block GTFSCSVInterpreter oftype CSVInterpreter {
        delimiter: ",";
        enclosing: '"';
    }

    block GTFSTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype GeoCoordinates,
            "stop_lon" oftype GeoCoordinates,
            "zone_id" oftype ZoneID
        ];
    }

    // Load data into sqlite database
    block GTFSLoader oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }

    // Build GTFSPipeline's blocks
    GTFSExtractor
        -> GTFSArchiveInterpreter
        -> GTFSFilePicker
        -> GTFSTextFileInterpreter
        -> GTFSCSVInterpreter
        -> GTFSTableInterpreter
        -> GTFSLoader;
}